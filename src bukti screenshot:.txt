src bukti screenshot:
https://imgur.com/a/JnpKz //delete student
https://imgur.com/a/DzP0m //update student
https://imgur.com/a/i91Er //update with object parameter

----------------- TUTORIAL 4

Jawaban Pertanyaan:
1. Menurut saya validasi input yang opsional dan required tidak diperlukan jika menggunakan requestparam, 
karena didalam methodnya sendiri bisa ada validasi dan penanganan masalah jika salahsatu input yang required tidak diisi. Tapi bolh dilakukan validasi.

2.

3. Ya mungkin, karena RequestMapping memungkinkan method get dan post digunakan sekaligus.
Hanya saja berdasarkan source yang saya baca, hasil yang didapat dari kedua method tersebut perlu di handle dengan BindingResult


----------------- METHOD YANG DIBUAT

---- DELETE STUDENT ----

    @RequestMapping("/student/delete/{npm}")
    public String delete (@PathVariable(value = "npm") String npm)
    {
        if (studentDAO.selectStudent(npm)==null) {
        	return "not-found";
        }
    	studentDAO.deleteStudent (npm);

        return "delete";
    }

    @Override
    public void deleteStudent (String npm)
    {
    	log.info("student "+npm+" deleted");
    	studentMapper.deleteStudent(npm);
    }

    @Delete("DELETE FROM student WHERE npm = #{npm}")
    void deleteStudent (@Param("npm") String npm);
    

 deskripsi: menerima input berupa npm. jika student yang memiliki nilai npm tersebut tidak ditemukan 
 maka selectStudent akan mengembalikan null. ketika itu terjadi maka akan langsung membuka laman not-found.
 Selain itu, maka akan dipanggil method deleteStudent yang akan menghapus student dengan npm tersebut
 lalu akan mereturn halaman delete berhasil dilakukan.

---- UPDATE STUDENT ----

    @RequestMapping("/student/update/{npm}")
    public String update(@PathVariable(value="npm") String npm) {
    	if (studentDAO.selectStudent(npm)==null) return "not-found";
    	return "form-update";
    }
    
    @RequestMapping(value="/student/update/submit", method=RequestMethod.POST)
    public String updateSubmit(
    		@RequestParam(value = "npm", required = false) String npm,
    		@RequestParam(value = "name", required = false) String name,
    		@RequestParam(value = "gpa", required = false) double gpa){
    	StudentModel student = new StudentModel(npm,name,gpa);
    	studentDAO.updateStudent(student);
    	return "success-update";
    }

    @Override
    public void updateStudent(StudentModel student) {
    	log.info("gaada yang muncul");
    	studentMapper.updateStudent(student);
    	
    }

    @Update ("UPDATE student SET gpa=#{gpa}, name=#{name} where npm=#{npm}")
    void updateStudent(StudentModel student);

deskripsi: menerima input berupa npm. Sama seperti delete, jika selectStudent mengembalikan nilai null
maka not-found akan langsung dibuka, jika tidak maka laman form-update akan dibuka.
pada laman ini form terhubung dengan method updateSubtmit. isi yang ada pada form update akan diambil
sebagai parameter method ini (npm, nama, gpa). lalu object student dibuat dan dipanggil method updateStudent yang memanggil method updateStudent pada StudentMapper yang berisikan query untuk mengupdate isi tabel berdasar parameter.

---- UPDATE STUDENT with object parameter ----

    @RequestMapping("/student/update/{npm}")
    public String update(Model model, @PathVariable(value="npm") String npm) {
    	if (studentDAO.selectStudent(npm)==null) return "not-found";
    	StudentModel student = studentDAO.selectStudent(npm);
    	model.addAttribute("student", student);
    	return "form-update";
    }
    
    @RequestMapping(value="/student/update/submit", method=RequestMethod.POST)
    public String updateSubmit(@ModelAttribute StudentModel student) {
    	studentDAO.updateStudent(student);
    	return "success-update";
    }